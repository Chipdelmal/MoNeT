# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
library(truncdist)
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = filepath + ".csv",row.names=FALSE)
return(x)
},simplify = FALSE)
paste(filepath,".csv")
paste(filepath,".csv", sep="")
# zero-inflated truncated exponential (ZITE)
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
library(truncdist)
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
# zero-inflated truncated exponential (ZITE)
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
library(truncdist)
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
# zero-inflated truncated exponential (ZITE)
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
#library(truncdist)
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
# zero-inflated truncated exponential (ZITE)
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
#library(truncdist)
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
library(truncdist)
print(.libPaths())
?Startup
setwd(dir)
setwd()
setwd(wd)
getwd()
setwd("/Users/mayashen/Desktop/python2R")
getwd()
print(.libPaths())
# zero-inflated truncated exponential (ZITE)
setwd("/Users/mayashen/Desktop/python2R")
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
require(truncdist)
#print(.libPaths())
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
# zero-inflated truncated exponential (ZITE)
setwd("/Users/mayashen/Desktop/python2R")
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
require(truncdist)
#print(.libPaths())
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
?Sta
?Startup
?Startup
print(.libPaths())
# zero-inflated truncated exponential (ZITE)
setwd("/Users/mayashen/Desktop/python2R")
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <- 2 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
require(truncdist)
print(.libPaths())
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
print(.libPaths())
print(.libPaths())
# zero-inflated truncated exponential (ZITE)
#setwd("/Users/mayashen/Desktop/python2R")
args <- commandArgs()
print(args[6])
# arguments to send to the script
n <- 10 #1e-3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90
n_samp <-1 # how many times to resample from ZITE
filepath <- "~/Desktop/python2R/MyData"
print(.libPaths())
.libPaths( c( .libPaths(), "/Library/Frameworks/R.framework/Versions/3.5/Resources/library"))
print(.libPaths())
library(truncdist)
# expectation of truncated exp; from Mathematica
texp_mean <- function(lambda,b){
(-b/(exp(b*lambda)-1)) + (1/lambda)
}
# use this function if using uniroot
texp_f <- function(lambda,b,mean){
((-b/(exp(b*lambda)-1)) + (1/lambda)) - mean
}
main <- function(filepath, n=10, popnode=15, cv=.8, p=.15, b=90, n_samp=2) {
totpop <- n*popnode
# sample the populations n_samp times
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the rate parameter we would need to hit the same mean overall with untruncated
adpop_star <- totpop/sum(x!=0)
# solve for the truncated lambda (trancendental equation, need numerical soln)
lambda_trunc <- uniroot(f = texp_f,interval = c(1e-6,b),b = b,mean = adpop_star)$root
# draw from the distribution
x[x!=0] <- truncdist::rtrunc(n = sum(x!=0),spec = "exp",a = 0,b = b,rate = lambda_trunc)
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
write.csv(x, file = paste(filepath,".csv", sep=""),row.names=FALSE)
return(x)
},simplify = FALSE)
}
main(args[7])
"1.5".asnumeric()
as.numeric("1.5")
# zero-inflated truncated Gamma (ZITG)
# arguments to send to the script
n <- 1e3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90 # upper truncation
n_samp <- 1000 # how many times to resample from ZITG
args <- commandArgs()
print(.libPaths())
.libPaths( c( .libPaths(), "/Library/Frameworks/R.framework/Versions/3.5/Resources/library"))
print(.libPaths())
library(pracma)
library(truncdist)
# 1st moment (aka Mean) of upper-truncated Gamma
tgamma_m1 <- function(alpha,beta,b){
pracma::gammainc(x = beta*b,a = alpha + 1)[[1]] / (beta * pracma::gammainc(x = beta*b,a = alpha)[[1]])
}
# 2st moment of upper-truncated Gamma
tgamma_m2 <- function(alpha,beta,b){
pracma::gammainc(x = beta*b,a = alpha + 2)[[1]] / ((beta^2) * pracma::gammainc(x = beta*b,a = alpha)[[1]])
}
# Variance of upper-truncated Gamma
tgamma_var <- function(alpha,beta,b){
tgamma_m2(alpha,beta,b) - (tgamma_m1(alpha,beta,b)^2)
}
# system of equations to solve: we want to find alpha,beta st. we get the mean/variance we asked for
tgamma_sys <- function(x,b,mean,var){
alpha <- exp(x[[1]])
beta <- exp(x[[2]])
m <- tgamma_m1(alpha = alpha,beta = beta,b = b) - mean
if(is.nan(m)){
m <- 2e16
}
v <- tgamma_var(alpha = alpha,beta = beta,b = b) - var
if(is.nan(v)){
v <- 2e16
}
c(m,v)
}
# starting points for optimization, these are the parameters of the untruncated gamma
tgamma_start <- function(mean,var){
c(
alpha=(mean^2)/var,
beta=mean/var
)
}
totpop <- n*popnode
# resample
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the mean and variance we would need to hit the same mean overall with untruncated
mean_star <- (popnode*n)/sum(x!=0)
var_star <- (mean_star*cv)^2
# get some starting points, perturb them
x0_pts <- tgamma_start(mean = mean_star,var = var_star)
# try Newton's method
soln <- try(pracma::newtonsys(Ffun = tgamma_sys,x0 = log(x0_pts),Jfun = NULL,
b = b,mean = mean_star,var = var_star))
if(inherits(soln,"try-error")){
stop("warning: Newton's method did not converge; try reducing CV and re-sample")
}
# draw from the distribution
x[x!=0] <- rtrunc(n = sum(x!=0),spec = "gamma",a = 0,b = b,shape = exp(soln$zero)[[1]],rate = exp(soln$zero)[[2]])
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
return(x)
})
install.packages("pracma")
# zero-inflated truncated Gamma (ZITG)
# arguments to send to the script
n <- 1e3 # number of nodes in the network
popnode <- 15 # average population per node
cv <- 0.8 # somewhat clustered compared to exponential
p <- 0.15 # fraction of empty nodes
b <- 90 # upper truncation
n_samp <- 1000 # how many times to resample from ZITG
args <- commandArgs()
print(.libPaths())
.libPaths( c( .libPaths(), "/Library/Frameworks/R.framework/Versions/3.5/Resources/library"))
print(.libPaths())
library(pracma)
library(truncdist)
# 1st moment (aka Mean) of upper-truncated Gamma
tgamma_m1 <- function(alpha,beta,b){
pracma::gammainc(x = beta*b,a = alpha + 1)[[1]] / (beta * pracma::gammainc(x = beta*b,a = alpha)[[1]])
}
# 2st moment of upper-truncated Gamma
tgamma_m2 <- function(alpha,beta,b){
pracma::gammainc(x = beta*b,a = alpha + 2)[[1]] / ((beta^2) * pracma::gammainc(x = beta*b,a = alpha)[[1]])
}
# Variance of upper-truncated Gamma
tgamma_var <- function(alpha,beta,b){
tgamma_m2(alpha,beta,b) - (tgamma_m1(alpha,beta,b)^2)
}
# system of equations to solve: we want to find alpha,beta st. we get the mean/variance we asked for
tgamma_sys <- function(x,b,mean,var){
alpha <- exp(x[[1]])
beta <- exp(x[[2]])
m <- tgamma_m1(alpha = alpha,beta = beta,b = b) - mean
if(is.nan(m)){
m <- 2e16
}
v <- tgamma_var(alpha = alpha,beta = beta,b = b) - var
if(is.nan(v)){
v <- 2e16
}
c(m,v)
}
# starting points for optimization, these are the parameters of the untruncated gamma
tgamma_start <- function(mean,var){
c(
alpha=(mean^2)/var,
beta=mean/var
)
}
totpop <- n*popnode
# resample
pops <- replicate(n = n_samp,expr = {
# bernoulli draws for 0 adults
x <- rbinom(n = n,size = 1,prob = p)
x <- as.integer(!x)
# the mean and variance we would need to hit the same mean overall with untruncated
mean_star <- (popnode*n)/sum(x!=0)
var_star <- (mean_star*cv)^2
# get some starting points, perturb them
x0_pts <- tgamma_start(mean = mean_star,var = var_star)
# try Newton's method
soln <- try(pracma::newtonsys(Ffun = tgamma_sys,x0 = log(x0_pts),Jfun = NULL,
b = b,mean = mean_star,var = var_star))
if(inherits(soln,"try-error")){
stop("warning: Newton's method did not converge; try reducing CV and re-sample")
}
# draw from the distribution
x[x!=0] <- rtrunc(n = sum(x!=0),spec = "gamma",a = 0,b = b,shape = exp(soln$zero)[[1]],rate = exp(soln$zero)[[2]])
if(any(x[x!=0] > b)){
stop("something has gone horribly awry")
}
x <- as.integer(round(x))
return(x)
})
