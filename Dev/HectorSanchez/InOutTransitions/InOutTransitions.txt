InTuples[communitiesList_, syllablesLabels_] := Module[{communitiesIndexes},
  	communitiesIndexes = Map[(Map[Position[syllablesLabels, #] &, #] // Flatten) &, communitiesList];
  	Tuples[#, 2] & /@ communitiesIndexes
]
OutTuples[communitiesList_, syllablesLabels_] := Module[{outCommunity, communitiesIndexes},
  	communitiesIndexes = Map[(Map[Position[syllablesLabels, #] &, #] // Flatten) &,communitiesList];
  	outCommunity = Delete[Range[syllablesLabels // Length], #] & /@ Map[{#} & /@ # &, communitiesIndexes];
  	Tuples[{#[[1]], #[[2]]}] & /@ ({communitiesIndexes, outCommunity} //Transpose)
]
TransitionsValues[inputMatrix_, tuples_] := Map[Map[inputMatrix[[#[[1]], #[[2]]]] &, #] &, tuples] // N;
CalculateInOutRatio[inOutList_] := (inOutList[[1]]/(inOutList[[1]] + inOutList[[2]]))
Options[GetCommunitiesInOutTransitionsFrequencies] := {CountLoops -> True}
GetCommunitiesInOutTransitionsFrequencies[frequencyOutput_, communities_, OptionsPattern[]] := Module[{frequencyMatrix, labels, inTuples, inTransitions, outTuples, outTransitions, inTotals, outTotals},
  	frequencyMatrix = frequencyOutput[[1]];
  	labels = frequencyOutput[[2]];
  	inTuples = If[OptionValue[CountLoops],InTuples[communities, labels],DeleteCases[#,{a_,a_}]&/@InTuples[communities, labels]];
  	outTuples = OutTuples[communities, labels];
  	inTransitions = TransitionsValues[frequencyMatrix, inTuples];
  	outTransitions = TransitionsValues[frequencyMatrix, outTuples];
  	inTotals = Total /@ inTransitions;
  	outTotals = Total /@ outTransitions;
  	{inTotals, outTotals}
]