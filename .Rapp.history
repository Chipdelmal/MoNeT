mbites_par_male
mbites_par_male2
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
jsonOut=prettify(toJSON(human_par))#
write(jsonOut,paste0(DIR,"human_par.json"))#
human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
jsonOut=prettify(toJSON(mbites_par_female))#
write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
jsonOut=prettify(toJSON(mbites_par_male))#
write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=TRUE)#
# ------------------------------------------------------------------------------
mbites_par_male2
mbites_par_male
mbites_par_male==mbites_par_male2
mbites_par_male
mbites_par_male2
mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)
mbites_par_male2
jsonOut=toJSON(mbites_par_male)#
write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)
mbites_par_male2
mbites_par_male
jsonOut=prettify(toJSON(human_par))#
write(jsonOut,paste0(DIR,"human_par.json"))#
human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=FALSE)
human_par
human_par2
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par2,MosquitoPop_PAR = mosquito_par,directory = DIR)
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
class(human_par)
class(human_par2)
human_par[[1]]
human_par2[[1]]
jsonOut=prettify(toJSON(human_par))#
write(jsonOut,paste0(DIR,"human_par.json"))#
human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE
human_par2[[1]]
human_par[[1]]
# Export to json ---------------------------------------------------------------#
jsonOut=prettify(toJSON(human_par))#
write(jsonOut,paste0(DIR,"human_par.json"))#
human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)
human_par[[1]]
human_par2[[1]]
toJSON(human_par)
fromJSON(human_par)
library(jsonlite)
x=toJSON(human_par)#
fromJSON(human_par)
require(XML)
library(rjson)
rm(list=ls());gc()
library(MASHmicro)
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})
library(rjson)
toJSON(human_par)
fromJSON(a)
a=toJSON(human_par)#
fromJSON(a)
write(a,paste0(DIR,"jsonTest.json"))
fromJSON(paste0(DIR,"jsonTest.json"))
fromJSON(a,paste0(DIR,"jsonTest.json"))
fromJSON(a)
fromJSON(file=paste0(DIR,"jsonTest.json"))
b=fromJSON(file=paste0(DIR,"jsonTest.json"))
b
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = b,MosquitoPop_PAR = mosquito_par,directory = DIR)
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = b,MosquitoPop_PAR = mosquito_par,directory = DIR)
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = b,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#write(toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
a=toJSON(mbites_par_female)
write(a,paste0(DIR,"jsonTest.json"))
a
b=fromJSON(file=paste0(DIR,"jsonTest.json"))
b
mbites_par_female
b
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = b,#
  MBITES_PAR_MALE = mbites_par_male#
)
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#write(toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
a=toJSON(mbites_par_female)#
write(a,paste0(DIR,"jsonTest.json"))#
b=fromJSON(file=paste0(DIR,"jsonTest.json"))#
#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#write(toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
a=toJSON(mbites_par_female)#
write(a,paste0(DIR,"jsonTest.json"))#
b=fromJSON(file=paste0(DIR,"jsonTest.json"))#
#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = b,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#write(toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
a=toJSON(mbites_par_female)#
write(a,paste0(DIR,"jsonTest.json"))#
b=fromJSON(file=paste0(DIR,"jsonTest.json"))#
#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
library(jsonlite)
serializeJSON(mosquito_par)
serializeJSON(mosquito_par,pretty=TRUE)
identical(unserializeJSON(serial),mosquito_par)
serial=serializeJSON(mosquito_par,pretty=TRUE)#
identical(unserializeJSON(serial),mosquito_par)
serial
unserializeJSON(serial)
serial=serializeJSON(mosquito_par,pretty=FALSE)
unserializeJSON(serial)
mosquito_par
serial=serializeJSON(mbites_par_female,pretty=FALSE)
serial
identical(unserializeJSON(serial),mbites_par_female)
serial
unserializeJSON(serial)
mbites_par_female
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = serial,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
library(MASHmicro)#
library(rjson)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = serial,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
library(MASHmicro)#
library(rjson)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = serial,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json
mosquito_par
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = unserializeJSON(serial),#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O#
write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
serialF=serializeJSON(mbites_par_female,pretty=FALSE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = unserializeJSON(serialF),#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
write(serial,paste0(DIR,"mbites_par_female.json"))
serial=serializeJSON(mbites_par_female,pretty=FALSE)#
write(serial,paste0(DIR,"mbites_par_female.json"))
write(serial,paste0(DIR,"mbites_par_female.json"),pretty=TRUE)
write(serial,paste0(DIR,"mbites_par_female.json"))
serial=serializeJSON(mbites_par_female,pretty=TRUE)#
write(serial,paste0(DIR,"mbites_par_female.json"))
mydata <- stream_in(paste0(DIR,"mbites_par_female.json"))
mydata <- stream_in(con=paste0(DIR,"mbites_par_female.json"))
mydata <- stream_in(file(paste0(DIR,"mbites_par_female.json")))
serial=serializeJSON(mbites_par_female,pretty=FALSE)#
write(serial,paste0(DIR,"mbites_par_female.json"))#
mydata <- stream_in(file(paste0(DIR,"mbites_par_female.json")))
mydata
fromJSON(paste0(DIR,"mbites_par_female.json"))
serial=serializeJSON(mbites_par_female,pretty=FALSE)#
write(serial,paste0(DIR,"mbites_par_female.json"))#
fromJSON(paste0(DIR,"mbites_par_female.json"))
read_json(paste0(DIR,"mbites_par_female.json"))
mbites_par_female
read_json(paste0(DIR,"mbites_par_female.json"))
unserializeJSON(read_json(paste0(DIR,"mbites_par_female.json")))
unserializeJSON(paste0(DIR,"mbites_par_female.json"))
serial=serializeJSON(mbites_par_female,pretty=FALSE)#
write(serial,paste0(DIR,"mbites_par_female.json"))#
unserializeJSON(paste0(DIR,"mbites_par_female.json"))
con=file(paste0(DIR,"mbites_par_female.json"))
con
unserializeJSON(con)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(rjson)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O#
write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O#
serialF=serializeJSON(mbites_par_female,pretty=FALSE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O ----------------------------------------------------------------#
#write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
serial=serializeJSON(human_par,pretty=FALSE)#
write(serial,paste0(DIR,"human_par.json"))#
con=file(paste0(DIR,"human_par.json"))#
human_par=unserializeJSON(con)
human_par
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O ----------------------------------------------------------------#
#write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
serial=serializeJSON(human_par,pretty=FALSE)#
write(serial,paste0(DIR,"human_par.json"))#
con=file(paste0(DIR,"human_par.json"))#
human_par=unserializeJSON(con)#
# ------------------------------------------------------------------------------#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O#
serialF=serializeJSON(mbites_par_female,pretty=FALSE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O ----------------------------------------------------------------#
#write(rjson::toJSON(human_par),paste0(DIR,"human_par.json"))#
#human_par=rjson::fromJSON(file=paste0(DIR,"human_par.json"))#
serial=serializeJSON(human_par,pretty=TRUE)#
write(serial,paste0(DIR,"human_par.json"))#
con=file(paste0(DIR,"human_par.json"))#
human_par=unserializeJSON(con)#
# ------------------------------------------------------------------------------#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O#
serialF=serializeJSON(mbites_par_female,pretty=FALSE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
export_MASH_parameters=function(file,parameters_structure){#
  serial=serializeJSON(parameters_structure,pretty=FALSE)#
  write(serial,file)#
}#
import_MASH_parameters=function(file){#
  connection=file(file)#
  unserializeJSON(connection)#
}
# ------------------------------------------------------------------------------#
export_MASH_parameters=function(file,parameters_structure){#
  serial=jsonlite::serializeJSON(parameters_structure,pretty=FALSE)#
  write(serial,file)#
}#
import_MASH_parameters=function(file){#
  connection=file(file)#
  jsonlite::unserializeJSON(connection)#
}#
# ------------------------------------------------------------------------------
export_MASH_parameters(paste0(DIR,"human_par.json"),human_par)
human_par=import_MASH_parameters(paste0(DIR,"human_par.json"))
human_par
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
################################################################################
#
################################################################################
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O ----------------------------------------------------------------#
# serial=jsonlite::serializeJSON(human_par,pretty=TRUE)#
# write(serial,paste0(DIR,"human_par.json"))#
# con=file(paste0(DIR,"human_par.json"))#
# human_par=jsonlite::unserializeJSON(con)#
export_MASH_parameters(paste0(DIR,"human_par.json"),human_par)#
human_par=import_MASH_parameters(paste0(DIR,"human_par.json"))#
# ------------------------------------------------------------------------------#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O#
serialF=serializeJSON(mbites_par_female,pretty=FALSE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
################################################################################
export_MASH_parameters=function(file,parameters_structure){#
  serial=jsonlite::serializeJSON(parameters_structure,pretty=FALSE)#
  write(serial,file)#
}#
import_MASH_parameters=function(file){#
  connection=file(file)#
  jsonlite::unserializeJSON(connection)#
}#
################################################################################
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O ----------------------------------------------------------------#
# serial=jsonlite::serializeJSON(human_par,pretty=TRUE)#
# write(serial,paste0(DIR,"human_par.json"))#
# con=file(paste0(DIR,"human_par.json"))#
# human_par=jsonlite::unserializeJSON(con)#
export_MASH_parameters(paste0(DIR,"human_par.json"),human_par)#
human_par=import_MASH_parameters(paste0(DIR,"human_par.json"))#
# ------------------------------------------------------------------------------#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O#
serialF=serializeJSON(mbites_par_female,pretty=FALSE)#
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
export_MASH_parameters(paste0(DIR,"mbites_par_female.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_female.json"))
mbites_par_female
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
################################################################################
export_MASH_parameters=function(file,parameters_structure,pretty=FALSE){#
  serial=jsonlite::serializeJSON(parameters_structure,pretty=pretty)#
  write(serial,file)#
}#
import_MASH_parameters=function(file){#
  connection=file(file)#
  jsonlite::unserializeJSON(connection)#
}#
################################################################################
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O #################################################################
export_MASH_parameters(paste0(DIR,"human_par.json"),human_par)#
human_par=import_MASH_parameters(paste0(DIR,"human_par.json"))#
#################################################################################
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O ##############################################################
export_MASH_parameters(paste0(DIR,"mbites_par_female.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_female.json"))#
export_MASH_parameters(paste0(DIR,"mbites_par_male.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_male.json"))#
#################################################################################
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
################################################################################
#       __  ___      ____  _____________________#
#      /  |/  /     / __ )/  _/_  __/ ____/ ___/#
#     / /|_/ /_____/ __  |/ /  / / / __/  \__ \#
#    / /  / /_____/ /_/ // /  / / / /___ ___/ /#
#   /_/  /_/     /_____/___/ /_/ /_____//____/#
##
#   MICRO#
#   MBITES: Testing#
#   MASH Team#
#   January 2018#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
################################################################################
export_MASH_parameters=function(file,parameters_structure,pretty=TRUE){#
  serial=jsonlite::serializeJSON(parameters_structure,pretty=pretty)#
  write(serial,file)#
}#
import_MASH_parameters=function(file){#
  connection=file(file)#
  jsonlite::unserializeJSON(connection)#
}#
################################################################################
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O #################################################################
export_MASH_parameters(paste0(DIR,"human_par.json"),human_par)#
human_par=import_MASH_parameters(paste0(DIR,"human_par.json"))#
#################################################################################
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O ##############################################################
export_MASH_parameters(paste0(DIR,"mbites_par_female.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_female.json"))#
export_MASH_parameters(paste0(DIR,"mbites_par_male.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_male.json"))#
#################################################################################
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
Image('http://jakevdp.github.com/figures/xkcd_version.png')
rm(list=ls());gc()#
library(MASHmicro)#
library(jsonlite)#
# set.seed(42L)#
#
################################################################################
export_MASH_parameters=function(file,parameters_structure,pretty=TRUE){#
  serial=jsonlite::serializeJSON(parameters_structure,pretty=pretty)#
  write(serial,file)#
}#
import_MASH_parameters=function(file){#
  connection=file(file)#
  jsonlite::unserializeJSON(connection)#
}#
################################################################################
#
# DEBUG.MASHMICRO()#
# MASHcpp::DEBUG.MASHCPP()#
# MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
DIR = "/Users/sanchez.hmsc/Desktop/MBITES/"#
#
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
MBITES.Male.Setup(timing = "exponential")
MBITES.Search.Setup(module = "kernel")
# landscape parameters#
nAqua = 20#
nPeriDom = 2#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
periDomestic[1:nPeriDom] = TRUE#
lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
module[1:nPeriDom] = "emerge"#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
# Human par I/O #################################################################
export_MASH_parameters(paste0(DIR,"human_par.json"),human_par)#
human_par=import_MASH_parameters(paste0(DIR,"human_par.json"))#
#################################################################################
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1 )#
mbites_par_male = MBITES.Male.Parameters(maleHistory = TRUE)#
# Mosquito par I/O ##############################################################
export_MASH_parameters(paste0(DIR,"mbites_par_female.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_female.json"))#
export_MASH_parameters(paste0(DIR,"mbites_par_male.json"),mbites_par_female)#
mbites_par_female=import_MASH_parameters(paste0(DIR,"mbites_par_male.json"))#
#################################################################################
mosquito_par = list(#
  N_female = nMosy,#
  N_male = nMosy,#
  ix_female = rep(1,nMosy),#
  ix_male = rep(1,nMosy),#
  genotype_female = rep(1,nMosy),#
  genotype_male = rep(1,nMosy),#
  MBITES_PAR_FEMALE = mbites_par_female,#
  MBITES_PAR_MALE = mbites_par_male#
)#
# Export to json ---------------------------------------------------------------#
# jsonOut=prettify(toJSON(human_par))#
# write(jsonOut,paste0(DIR,"human_par.json"))#
# human_par2=read_json(paste0(DIR,"human_par.json"),simplifyVector=TRUE)#
# jsonOut=prettify(toJSON(mbites_par_female))#
# write(jsonOut,paste0(DIR,"mbites_par_female.json"))#
# mbites_par_female2=read_json(paste0(DIR,"mbites_par_female.json"),simplifyVector=TRUE)#
# jsonOut=toJSON(mbites_par_male)#
# write(jsonOut,paste0(DIR,"mbites_par_male.json"))#
# mbites_par_male2=read_json(paste0(DIR,"mbites_par_male.json"),simplifyVector=FALSE)#
# ------------------------------------------------------------------------------#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
detach("package:MASHmicro", unload=TRUE)
0.00001
0.0004
################################################################################
#       __  ______   _____ __  __      __  _________________  ____#
#      /  |/  /   | / ___// / / /     /  |/  /  _/ ____/ __ \/ __ \#
#     / /|_/ / /| | \__ \/ /_/ /_____/ /|_/ // // /   / /_/ / / / /#
#    / /  / / ___ |___/ / __  /_____/ /  / // // /___/ _, _/ /_/ /#
#   /_/  /_/_/  |_/____/_/ /_/     /_/  /_/___/\____/_/ |_|\____/#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(R6)#
library(jsonlite)#
# set.seed(42L)#
#
#DEBUG.MASHMICRO()#
#MASHcpp::DEBUG.MASHCPP()#
#MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
if(system("whoami",intern=TRUE)=="slwu89"){#
  DIR="/Users/slwu89/Desktop/MASHOUT/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  #DIR="/Users/sanchez.hmsc/Desktop/MASHOUT/"#
  DIR="/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/Debug/"#
  source("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/")#
}else if(system("whoami",intern=TRUE)=="chipdelmal"){#
  DIR="/Users/chipdelmal/Desktop/MASHOUT/"#
  source("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/VectorControl/")#
}#
#
################################################################################
# Chord diagram#
################################################################################
# oneHistory: a single mosquito's JSON outfile#
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}#
################################################################################
#
################################################################################
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 0#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
if(nPeriDom>0){#
  periDomestic[1:nPeriDom] = TRUE#
  lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
  module[1:nPeriDom] = "emerge"#
}#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = FALSE,MATE = FALSE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 750,verbose = TRUE,trackPop = TRUE)#
#
#########################################################################################
###### TESTS ############################################################################
#########################################################################################
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l),flatten = FALSE,simplifyVector=FALSE)#
mPop = read.table(file = paste0(DIR,"MOSQUITO/",pop_l),header = TRUE,sep = ",")#
circlizeStatesTransitionMatrix(history=mHist)
traceback()
################################################################################
#       __  ______   _____ __  __      __  _________________  ____#
#      /  |/  /   | / ___// / / /     /  |/  /  _/ ____/ __ \/ __ \#
#     / /|_/ / /| | \__ \/ /_/ /_____/ /|_/ // // /   / /_/ / / / /#
#    / /  / / ___ |___/ / __  /_____/ /  / // // /___/ _, _/ /_/ /#
#   /_/  /_/_/  |_/____/_/ /_/     /_/  /_/___/\____/_/ |_|\____/#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(R6)#
library(jsonlite)#
# set.seed(42L)#
#
#DEBUG.MASHMICRO()#
#MASHcpp::DEBUG.MASHCPP()#
#MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
if(system("whoami",intern=TRUE)=="slwu89"){#
  DIR="/Users/slwu89/Desktop/MASHOUT/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  #DIR="/Users/sanchez.hmsc/Desktop/MASHOUT/"#
  DIR="/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/Debug/"#
  source("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/")#
}else if(system("whoami",intern=TRUE)=="chipdelmal"){#
  DIR="/Users/chipdelmal/Desktop/MASHOUT/"#
  source("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/VectorControl/")#
}#
#
################################################################################
# Chord diagram#
################################################################################
# oneHistory: a single mosquito's JSON outfile#
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}#
################################################################################
#
################################################################################
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 0#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
if(nPeriDom>0){#
  periDomestic[1:nPeriDom] = TRUE#
  lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
  module[1:nPeriDom] = "emerge"#
}#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = FALSE,MATE = FALSE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
MicroTile$resetMicro(MosquitoPar = mosquito_par,HumanPar = human_par,EL4P = FALSE,mating = TRUE)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 750,verbose = TRUE,trackPop = TRUE)#
#
#########################################################################################
###### TESTS ############################################################################
#########################################################################################
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l),flatten = FALSE,simplifyVector=FALSE)#
mPop = read.table(file = paste0(DIR,"MOSQUITO/",pop_l),header = TRUE,sep = ",")#
circlizeStatesTransitionMatrix(history=mHist)
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l),flatten = FALSE,simplifyVector=FALSE)#
mPop = read.table(file = paste0(DIR,"MOSQUITO/",pop_l),header = TRUE,sep = ",")#
circlizeStatesTransitionMatrix(history=mHist)
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)
files_l
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv
hist_l
pop_l
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l),flatten = FALSE,simplifyVector=FALSE)
tracebac()
traceback()
paste0(DIR,"MOSQUITO/",hist_l)
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l),flatten = FALSE,simplifyVector=FALSE)
mPop = read.table(file = paste0(DIR,"MOSQUITO/",pop_l),header = TRUE,sep = ",")
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)
mHist
circlizeStatesTransitionMatrix(history=mHist)
library(markovchain)
circlizeStatesTransitionMatrix(history=mHist)
################################################################################
#       __  ______   _____ __  __      __  _________________  ____#
#      /  |/  /   | / ___// / / /     /  |/  /  _/ ____/ __ \/ __ \#
#     / /|_/ / /| | \__ \/ /_/ /_____/ /|_/ // // /   / /_/ / / / /#
#    / /  / / ___ |___/ / __  /_____/ /  / // // /___/ _, _/ /_/ /#
#   /_/  /_/_/  |_/____/_/ /_/     /_/  /_/___/\____/_/ |_|\____/#
##
################################################################################
#
################################################################################
# M-BITES: Complex Female + MBITES-Male Run with Emerge#
################################################################################
#
rm(list=ls());gc()#
library(MASHmicro)#
library(R6)#
library(jsonlite)#
library(markovchain)#
# set.seed(42L)#
#
#DEBUG.MASHMICRO()#
#MASHcpp::DEBUG.MASHCPP()#
#MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
if(system("whoami",intern=TRUE)=="slwu89"){#
  DIR="/Users/slwu89/Desktop/MASHOUT/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  #DIR="/Users/sanchez.hmsc/Desktop/MASHOUT/"#
  DIR="/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/Debug/"#
  source("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/")#
}else if(system("whoami",intern=TRUE)=="chipdelmal"){#
  DIR="/Users/chipdelmal/Desktop/MASHOUT/"#
  source("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/VectorControl/")#
}#
#
################################################################################
# Chord diagram#
################################################################################
# oneHistory: a single mosquito's JSON outfile#
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}#
################################################################################
#
################################################################################
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 0#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
if(nPeriDom>0){#
  periDomestic[1:nPeriDom] = TRUE#
  lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
  module[1:nPeriDom] = "emerge"#
}#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = FALSE,MATE = FALSE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 750,verbose = TRUE,trackPop = TRUE)#
#
#########################################################################################
###### TESTS ############################################################################
#########################################################################################
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
#mPop = read.table(file = paste0(DIR,"MOSQUITO/",pop_l),header = TRUE,sep = ",")#
circlizeStatesTransitionMatrix(history=mHist)
circlizeStatesTransitionMatrix(history=mHist)
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  browser()#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
#mPop = read.table(file = paste0(DIR,"MOSQUITO/",pop_l),header = TRUE,sep = ",")#
circlizeStatesTransitionMatrix(history=mHist)
states
mHist
mHist$stateG
mHist$stateH
rm(list=ls());gc()#
library(MASHmicro)#
library(R6)#
library(jsonlite)#
library(markovchain)#
# set.seed(42L)#
#
#DEBUG.MASHMICRO()#
#MASHcpp::DEBUG.MASHCPP()#
#MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
if(system("whoami",intern=TRUE)=="slwu89"){#
  DIR="/Users/slwu89/Desktop/MASHOUT/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  #DIR="/Users/sanchez.hmsc/Desktop/MASHOUT/"#
  DIR="/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/Debug/"#
  source("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/")#
}else if(system("whoami",intern=TRUE)=="chipdelmal"){#
  DIR="/Users/chipdelmal/Desktop/MASHOUT/"#
  source("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/VectorControl/")#
}
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)
circlizeStatesTransitionMatrix(history=mHist)
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  browser()#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}
circlizeStatesTransitionMatrix(history=mHist)
c
q
Q
# Chord diagram#
################################################################################
# oneHistory: a single mosquito's JSON outfile#
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}
circlizeStatesTransitionMatrix(history=mHist)
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")
mHist = mHist[-nullIx]
circlizeStatesTransitionMatrix(history = mHist)
chordDiagramFromMatrix
library(circlize)
circlizeStatesTransitionMatrix(history = mHist)
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}
MicroTile$get_Landscape()$get_FeedingSitesN()
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 0#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
if(nPeriDom>0){#
  periDomestic[1:nPeriDom] = TRUE#
  lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
  module[1:nPeriDom] = "emerge"#
}#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = FALSE,MATE = FALSE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}
MicroTile$simMICRO_oneRun(tMax = 750,verbose = TRUE,trackPop = TRUE)
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = TRUE,MATE = FALSE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}
MicroTile$get_Landscape()$get_SugarSites(1)
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = TRUE,MATE = TRUE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
rm(list=ls());gc()#
library(MASHmicro)#
library(R6)#
library(jsonlite)#
library(markovchain)#
library(circlize)#
# set.seed(42L)#
#
#DEBUG.MASHMICRO()#
#MASHcpp::DEBUG.MASHCPP()#
#MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
if(system("whoami",intern=TRUE)=="slwu89"){#
  DIR="/Users/slwu89/Desktop/MASHOUT/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  #DIR="/Users/sanchez.hmsc/Desktop/MASHOUT/"#
  DIR="/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/Debug/"#
  source("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/")#
}else if(system("whoami",intern=TRUE)=="chipdelmal"){#
  DIR="/Users/chipdelmal/Desktop/MASHOUT/"#
  source("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/VectorControl/")#
}#
#
################################################################################
# Chord diagram#
################################################################################
# oneHistory: a single mosquito's JSON outfile#
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}#
################################################################################
#
################################################################################
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 0#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
if(nPeriDom>0){#
  periDomestic[1:nPeriDom] = TRUE#
  lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
  module[1:nPeriDom] = "emerge"#
}#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = TRUE,MATE = TRUE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
#########################################################################################
###### TESTS ############################################################################
#########################################################################################
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
rm(list=ls());gc()#
library(MASHmicro)#
library(R6)#
library(jsonlite)#
library(markovchain)#
library(circlize)#
# set.seed(42L)#
#
#DEBUG.MASHMICRO()#
#MASHcpp::DEBUG.MASHCPP()#
#MASHmacro::DEBUG.MASHMACRO()#
#
# make a tile#
if(system("whoami",intern=TRUE)=="slwu89"){#
  DIR="/Users/slwu89/Desktop/MASHOUT/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  #DIR="/Users/sanchez.hmsc/Desktop/MASHOUT/"#
  DIR="/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/Debug/"#
  source("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/sanchez.hmsc/Documents/Github/MASH-Master/MASH-dev/HectorSanchez/VectorControl/")#
}else if(system("whoami",intern=TRUE)=="chipdelmal"){#
  DIR="/Users/chipdelmal/Desktop/MASHOUT/"#
  source("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/AssortedScripts/sourceEntireFolder.R")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-MICRO/R/")#
  sourceEntireFolder("/Users/chipdelmal/Documents/Github/MASH-Main/MASH-dev/HectorSanchez/VectorControl/")#
}#
#
################################################################################
# Chord diagram#
################################################################################
# oneHistory: a single mosquito's JSON outfile#
transitionsInMosquitoStates <- function(oneHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  states = oneHistory$stateH#
  createSequenceMatrix(stringchar = unlist(states[-1]),possibleStates = stateSpace)#
}#
#
transitionsInMosquitoPopulation <- function(popHistory, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transMatrices = lapply(X = popHistory,FUN = transitionsInMosquitoStates)#
  transitions = Reduce(f = "+",x = transMatrices)#
  transitions[stateSpace,stateSpace]#
}#
#
circlizeStatesTransitionMatrix <- function(history, stateSpace = c("D","M","F","B","R","L","O","S","E")){#
  transitions=transitionsInMosquitoPopulation(history,stateSpace=stateSpace)#
  colors=c("#555555","#95E455","pink","red","purple","cyan","blue","yellow","grey")#
  chordDiagramFromMatrix(transitions,directional=1,grid.col=colors,direction.type="arrows",self.link=2)#
}#
################################################################################
#
################################################################################
# setup#
Humans.MICRO.Setup()#
PfSI.MICRO.Setup()#
AQUA.Emerge.Setup()#
#
# MBITES setup#
MBITES.Setup(aquaModule = "emerge",timing = "exponential")#
#
# SEARCH setup#
MBITES.Search.Setup(module = "kernel")#
#
# landscape parameters#
nAqua = 20#
nPeriDom = 0#
nFeed = 15#
nSugar = 12#
nMate = 10#
emerge_par = list(N = nAqua,lambda = 25, lambdaWeight = NULL, offset = NULL)#
landscape_par = Landscape.Parameters(nFeed = nFeed,nAqua = nAqua,nMate = nMate,nSugar = nSugar,pointGen = "lattice",module = "emerge",modulePars = emerge_par)#
#
# set up the peri-domestic bit#
periDomestic = rep(FALSE,nFeed)#
lambda = replicate(n = nFeed,expr = NULL,simplify = FALSE)#
module = rep(NA,nFeed)#
#
if(nPeriDom>0){#
  periDomestic[1:nPeriDom] = TRUE#
  lambda[1:nPeriDom] = simpleLambda_Emerge(N = nPeriDom,lambda = 5)#
  module[1:nPeriDom] = "emerge"#
}#
#
landscape_par$FeedingSite_PAR$periDomestic = periDomestic#
landscape_par$FeedingSite_PAR$lambda = lambda#
landscape_par$FeedingSite_PAR$module = module#
#
# human parameters#
patch_humans = rep(1,nFeed)#
n_humans = sum(patch_humans)#
patch_id = rep(x = 1:nFeed,patch_humans)#
home_id = rep(x = 1:nFeed,patch_humans)#
human_ages = unlist(lapply(X = patch_humans,FUN = MASHmacro:::siteAges_HumanPop))#
human_bWeight = MASHmacro:::bitingWeight_HumanPop(human_ages)#
human_par = lapply(X = 1:n_humans,function(i){#
  list(#
    houseID = home_id[i],#
    patchID = patch_id[i],#
    homeHouseID = home_id[i],#
    homePatchID = patch_id[i],#
    age = human_ages[i],#
    bWeight = human_bWeight[i]#
#
  )#
})#
#
# M-BITES parameters#
nMosy = 50#
mbites_par_female = MBITES.Complex.Parameters(PfEIP = 1,SUGAR = TRUE,MATE = TRUE)#
mosquito_par = list(#
N_female = nMosy,#
ix_female = rep(1,nMosy),#
genotype_female = rep(1,nMosy),#
MBITES_PAR_FEMALE = mbites_par_female#
)#
#
MicroTile = Tile$new(Landscape_PAR = landscape_par,HumanPop_PAR = human_par,MosquitoPop_PAR = mosquito_par,directory = DIR)#
MicroTile$get_HumanPop()$init_ActivitySpace()#
#
# PfPR#
pfpr = rep(0.5,nFeed)#
MicroTile$simMICRO_oneRun(tMax = 50,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
#########################################################################################
###### TESTS ############################################################################
#########################################################################################
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)#
#
#########################################################################################
###### TESTS ############################################################################
#########################################################################################
# files from each simulation#
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}
###### Distribute #######################################################################
### Sugar #######################################################
sugarSitesNumber=MicroTile$get_Landscape()$get_SugarSitesN()#
for(i in 1:sugarSitesNumber){#
  atsbTest=ATSB$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_SugarSites(i)$set_attractiveSugarBait(atsbTest)#
}#
### Aquatic #####################################################
aquaSitesNumber=MicroTile$get_Landscape()$get_AquaSitesN()#
for(i in 1:aquaSitesNumber){#
  ovitrapTest=Ovitrap$new(id=i,killProbability=1,repelProbability=0)#
  MicroTile$get_Landscape()$get_AquaSites(i)$set_ovitrap(ovitrapTest)#
}#
### Feeding #####################################################
feedingSitesNumber=MicroTile$get_Landscape()$get_FeedingSitesN()#
for(i in 1:feedingSitesNumber){#
  irsTest=IRS$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_FeedingSites(i)$set_indoorResidualSpray(irsTest)#
}#
### Mating ######################################################
matingSitesNumber=MicroTile$get_Landscape()$get_MatingSitesN()#
for(i in 1:matingSitesNumber){#
  swarmSprayTest=SwarmSpray$new(id=i,killProbability=0,repelProbability=0)#
  MicroTile$get_Landscape()$get_MatingSites(i)$set_swarmSpray(swarmSprayTest)#
}#
###### Run ##############################################################################
MicroTile$simMICRO_oneRun(tMax = 500,PfPAR = pfpr,verbose = TRUE,trackPop = TRUE)
files_l = system(command = paste0("ls ",DIR,"MOSQUITO/"),intern = TRUE)#
hist_l  = files_l[grep(pattern="History",x=files_l)] # individual json histories#
pop_l = files_l[grep(pattern = "Pop",x = files_l)] # population csv#
mHist   = fromJSON(txt=paste0(DIR,"MOSQUITO/",hist_l[[1]]),flatten = FALSE,simplifyVector=FALSE)#
nullIx = which(vapply(X = mHist,FUN = function(x){x$ID[[1]]},FUN.VALUE = character(1)) == "NULL")#
mHist = mHist[-nullIx]#
circlizeStatesTransitionMatrix(history = mHist)
if(system("whoami",intern=TRUE)=="slwu89"){#
  Rcpp::sourceCpp('~/Desktop/git/MGDrive/Geospatial/calcDistHaversine.cpp')#
  Rcpp::sourceCpp('~/Desktop/git/MGDrivE/Geospatial/calcKernels.cpp')#
}else if(system("whoami",intern=TRUE)=="Partow"){#
  Rcpp::sourceCpp('/Users/Partow/Documents/github/MGDrive/Geospatial/calcDistHaversine.cpp')#
  Rcpp::sourceCpp('/Users/Partow/Documents/github/MGDrivE/Geospatial/calcKernels.cpp')#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  Rcpp::sourceCpp('/Users/sanchez.hmsc/Documents/github/MGDrive/Geospatial/calcDistHaversine.cpp')#
  Rcpp::sourceCpp('/Users/sanchez.hmsc/Documents/github/MGDrivE/Geospatial/calcKernels.cpp')#
}
data = system(command = paste0("ls ",dir),intern = TRUE)#
data = data[grep(pattern = ".*\\.csv$",x = data)]#
assign(x = "xyPts",value = as.matrix(read.table(file = paste0(dir,data),header = FALSE,sep = ",",colClasses = rep("numeric",2))),envir = dataEnv)#
#
distMat = calcDists(longlats = dataEnv$xyPts)#
kernMat = calcLognormalKernel(distMat = distMat,meanlog = lnormFitOptim@coef[[1]],sdlog = lnormFitOptim@coef[[2]])#
calcLognormalKernel#
lnorm.distr = function(longlats){#
  distMat = calcDists(longlats = dataEnv$xyPts)#
  kernMat = calcLognormalKernel(distMat = distMat,meanlog = lnormFitOptim@coef[[1]],sdlog = lnormFitOptim@coef[[2]])#
  return(kernMat)#
}#
gamma.distr = function(longlats){#
  distMat = calcDists(longlats = dataEnv$xyPts)#
  kernMat = calcGammaKernel(distMat = distMat,shape = gammaFit@coef[[1]],rate = gammaFit@coef[[2]])#
  return(kernMat)#
}#
exp.distr = function(longlats){#
  distMat = calcDists(longlats = dataEnv$xyPts)#
  kernMat = calcExpKernel(distMat = distMat,r = expFitOptim@coef[[1]])#
  return(kernMat)#
}#
lnorm.prob = lnorm.distr(longlats = dataEnv$xyPts)#
gamma.prob = gamma.distr(longlats = dataEnv$xyPts)#
exp.prob = exp.distr(longlats = dataEnv$xyPts)#
#### plot the output #####
plot(as.matrix(dataEnv$xyPts),pch=16,cex=0.25,xlab="longitude (east-west)",ylab ="latitude (north-south)")#
col_quantile = quantile(kernMat,probs=seq(0,1,0.1))#
cols = viridis(n = length(col_quantile))#
n = nrow(kernMat)#
# n = 100#
for(i in 1:n){#
  for(j in 1:n){#
    segments(x0 = dataEnv$xyPts[i,1],y0 = dataEnv$xyPts[i,2],#
             x1 = dataEnv$xyPts[j,1],y1 = dataEnv$xyPts[j,2],#
             col = col_quantile[findInterval(x = kernMat[i,j],vec = col_quantile)])#
  }#
}
data = system(command = paste0("ls ",dir),intern = TRUE)
if(system("whoami",intern=TRUE)=="slwu89"){#
  dir = "/Users/slwu89/Desktop/git/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="Partow"){#
  dir = "/Users/Partow/Documents/github/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  dir = "/Users/sanchez.hmsc/Documents/github/MGDrivE/Geospatial/data/"#
}
rm(list=ls());gc()#
library(bbmle)#
library(stringr)#
library(rootSolve)#
library(MASS)#
library(emdbook)#
library(viridis)#
#
################################################################################
# load partow's data into its own environment#
################################################################################
#
if(system("whoami",intern=TRUE)=="slwu89"){#
  dir = "/Users/slwu89/Desktop/git/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="Partow"){#
  dir = "/Users/Partow/Documents/github/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  dir = "/Users/sanchez.hmsc/Documents/github/MGDrivE/Geospatial/data/"#
}
data = system(command = paste0("ls ",dir),intern = TRUE)#
data = data[grep(pattern = ".*\\.csv$",x = data)]#
assign(x = "xyPts",value = as.matrix(read.table(file = paste0(dir,data),header = FALSE,sep = ",",colClasses = rep("numeric",2))),envir = dataEnv)
data = system(command = paste0("ls ",dir),intern = TRUE)#
data = data[grep(pattern = ".*\\.RData$",x = data)]#
#
dataEnv = new.env()
rm(list=ls());gc()#
library(bbmle)#
library(stringr)#
library(rootSolve)#
library(MASS)#
library(emdbook)#
library(viridis)#
#
################################################################################
# load partow's data into its own environment#
################################################################################
#
if(system("whoami",intern=TRUE)=="slwu89"){#
  dir = "/Users/slwu89/Desktop/git/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="Partow"){#
  dir = "/Users/Partow/Documents/github/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  dir = "/Users/sanchez.hmsc/Documents/github/MGDrivE/Geospatial/data/"#
}#
#
data = system(command = paste0("ls ",dir),intern = TRUE)#
data = data[grep(pattern = ".*\\.RData$",x = data)]#
#
dataEnv = new.env()#
#
for(d in data){#
  cat("reading file : ",d,"\n",sep = "")#
  load(file = paste0(dir,d),envir = dataEnv,verbose = TRUE)#
}#
#
par(mfrow=c(1,2))#
hist(dataEnv$aedes.counts.exclude.zeros,main = "empirical histogram")#
plot(ecdf(dataEnv$aedes.counts.exclude.zeros), main = "ECDF")#
par(mfrow=c(1,1))#
################################################################################
# fit smooth PDF from ECDF#
################################################################################
################################################################################
# fit parametric distributions#
################################################################################
#
dataMean = mean(dataEnv$aedes.counts.exclude.zeros)#
dataVar = var(dataEnv$aedes.counts.exclude.zeros)#
#
# 1. log-normal subexponential tail#
lnormLL = function(meanlog,sdlog){#
  -sum(dlnorm(x = dataEnv$aedes.counts.exclude.zeros,meanlog = meanlog,sdlog = sdlog,log = TRUE))#
}#
#
# check against fitdistr because MLEs are available in closed-form#
lnormFit = MASS::fitdistr(x = dataEnv$aedes.counts.exclude.zeros,densfun = "lognormal")#
lnormFitOptim = bbmle::mle2(lnormLL,start = list(meanlog=lnormFit$estimate[["meanlog"]],sdlog=lnormFit$estimate[["sdlog"]]),method = "L-BFGS-B",lower = c(0.1,0.1))#
#
lnormFitProf = bbmle::profile(lnormFitOptim)#
lnormAIC = bbmle::AIC(lnormFitOptim)#
#
# 2. exponential: exponential tail#
expLL = function(lambda){#
  -sum(dexp(x = dataEnv$aedes.counts.exclude.zeros,rate = lambda,log = TRUE))#
}#
#
# check against fitdistr because MLEs are available in closed-form#
expFit = MASS::fitdistr(x = dataEnv$aedes.counts.exclude.zeros,densfun = "exponential")#
expFitOptim = bbmle::mle2(expLL,start = list(lambda=expFit$estimate[["rate"]]),method = "L-BFGS-B",lower = c(0))#
#
expFitProf = bbmle::profile(expFitOptim)#
expAIC = bbmle::AIC(expFitOptim)#
#
# 3. gamma: exponential tail#
gammaLL = function(shape,rate){#
  -sum(dgamma(x = dataEnv$aedes.counts.exclude.zeros,shape = shape,rate = rate,log = TRUE))#
}#
#
# get initial estimates from MoM#
gammaShape = (dataMean^2) / dataVar#
gammaRate = dataMean / dataVar#
#
gammaFit = bbmle::mle2(gammaLL,start = list(shape=gammaShape,rate=gammaRate),method = "L-BFGS-B",lower = c(0,0))#
gammaProf = bbmle::profile(gammaFit,trace=TRUE,prof.lower=c(0,0))#
#
gammaAIC = bbmle::AIC(gammaFit)#
#
# weibull:subexponential tail and 2nd derivative of CDF can change with shape parameter (shape = 1 is exponential)#
weibullLL = function(shape,scale){#
  -sum(dweibull(x = dataEnv$aedes.counts.exclude.zeros,shape = shape,scale = scale,log = TRUE))#
}#
#
root <- 1+(sd(dataEnv$aedes.counts.exclude.zeros)/mean(dataEnv$aedes.counts.exclude.zeros))^2#
rootFind <- function(k) {#
  gamma(1+2/k)/gamma(1+1/k)^2 - root#
}#
shapeHat <- rootSolve::uniroot.all(rootFind, c(.Machine$double.eps, 100))#
scaleHat <- mean(dataEnv$aedes.counts.exclude.zeros)/gamma(1+1/shapeHat)#
#
weibullFit = bbmle::mle2(weibullLL,start = list(shape=shapeHat,scale=scaleHat),method = "L-BFGS-B",lower = c(0.1,0.1))#
weibullProf = bbmle::profile(weibullFit)#
#
weibullAIC = bbmle::AIC(weibullFit)#
#
# log-normal seems best#
c(lnormAIC=lnormAIC,expAIC=expAIC,gammaAIC=gammaAIC,weibullAIC=weibullAIC)#
plot(lnormFitProf)#
x =  seq(0,600,by=0.1)#
q_95 = qlnorm(p = 0.95,meanlog = lnormFit[[1]][["meanlog"]],sdlog = lnormFit[[1]][["sdlog"]])#
plot(dlnorm(x = x,meanlog = lnormFit[[1]][["meanlog"]],sdlog = lnormFit[[1]][["sdlog"]]),#
     main = "Fitted Lognormal Density",type="l",xlab="Distance (meters)",ylab="Density",xaxt="n")#
abline(v = q_95*10,col = "blue")#
text(x = (q_95*10), y = 0.005,labels = "95% quantile",col="blue")#
axis(side = 1,at = seq_along(x)[which(x %% 50 == 0)],labels = x[which(x %% 50 == 0)])
install.packages("bbmle")
install.packages("MASS")
install.packages("emdbook")
rm(list=ls());gc()#
library(bbmle)#
library(stringr)#
library(rootSolve)#
library(MASS)#
library(emdbook)#
library(viridis)
################################################################################
# libraries#
################################################################################
#
rm(list=ls());gc()#
library(bbmle)#
library(stringr)#
library(rootSolve)#
library(MASS)#
library(emdbook)#
library(viridis)#
#
################################################################################
# load partow's data into its own environment#
################################################################################
#
if(system("whoami",intern=TRUE)=="slwu89"){#
  dir = "/Users/slwu89/Desktop/git/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="Partow"){#
  dir = "/Users/Partow/Documents/github/MGDrivE/Geospatial/data/"#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  dir = "/Users/sanchez.hmsc/Documents/github/MGDrivE/Geospatial/data/"#
}#
#
data = system(command = paste0("ls ",dir),intern = TRUE)#
data = data[grep(pattern = ".*\\.RData$",x = data)]#
#
dataEnv = new.env()#
#
for(d in data){#
  cat("reading file : ",d,"\n",sep = "")#
  load(file = paste0(dir,d),envir = dataEnv,verbose = TRUE)#
}#
#
par(mfrow=c(1,2))#
hist(dataEnv$aedes.counts.exclude.zeros,main = "empirical histogram")#
plot(ecdf(dataEnv$aedes.counts.exclude.zeros), main = "ECDF")#
par(mfrow=c(1,1))#
################################################################################
# fit smooth PDF from ECDF#
################################################################################
################################################################################
# fit parametric distributions#
################################################################################
#
dataMean = mean(dataEnv$aedes.counts.exclude.zeros)#
dataVar = var(dataEnv$aedes.counts.exclude.zeros)#
#
# 1. log-normal subexponential tail#
lnormLL = function(meanlog,sdlog){#
  -sum(dlnorm(x = dataEnv$aedes.counts.exclude.zeros,meanlog = meanlog,sdlog = sdlog,log = TRUE))#
}#
#
# check against fitdistr because MLEs are available in closed-form#
lnormFit = MASS::fitdistr(x = dataEnv$aedes.counts.exclude.zeros,densfun = "lognormal")#
lnormFitOptim = bbmle::mle2(lnormLL,start = list(meanlog=lnormFit$estimate[["meanlog"]],sdlog=lnormFit$estimate[["sdlog"]]),method = "L-BFGS-B",lower = c(0.1,0.1))#
#
lnormFitProf = bbmle::profile(lnormFitOptim)#
lnormAIC = bbmle::AIC(lnormFitOptim)#
#
# 2. exponential: exponential tail#
expLL = function(lambda){#
  -sum(dexp(x = dataEnv$aedes.counts.exclude.zeros,rate = lambda,log = TRUE))#
}#
#
# check against fitdistr because MLEs are available in closed-form#
expFit = MASS::fitdistr(x = dataEnv$aedes.counts.exclude.zeros,densfun = "exponential")#
expFitOptim = bbmle::mle2(expLL,start = list(lambda=expFit$estimate[["rate"]]),method = "L-BFGS-B",lower = c(0))#
#
expFitProf = bbmle::profile(expFitOptim)#
expAIC = bbmle::AIC(expFitOptim)#
#
# 3. gamma: exponential tail#
gammaLL = function(shape,rate){#
  -sum(dgamma(x = dataEnv$aedes.counts.exclude.zeros,shape = shape,rate = rate,log = TRUE))#
}#
#
# get initial estimates from MoM#
gammaShape = (dataMean^2) / dataVar#
gammaRate = dataMean / dataVar#
#
gammaFit = bbmle::mle2(gammaLL,start = list(shape=gammaShape,rate=gammaRate),method = "L-BFGS-B",lower = c(0,0))#
gammaProf = bbmle::profile(gammaFit,trace=TRUE,prof.lower=c(0,0))#
#
gammaAIC = bbmle::AIC(gammaFit)#
#
# weibull:subexponential tail and 2nd derivative of CDF can change with shape parameter (shape = 1 is exponential)#
weibullLL = function(shape,scale){#
  -sum(dweibull(x = dataEnv$aedes.counts.exclude.zeros,shape = shape,scale = scale,log = TRUE))#
}#
#
root <- 1+(sd(dataEnv$aedes.counts.exclude.zeros)/mean(dataEnv$aedes.counts.exclude.zeros))^2#
rootFind <- function(k) {#
  gamma(1+2/k)/gamma(1+1/k)^2 - root#
}#
shapeHat <- rootSolve::uniroot.all(rootFind, c(.Machine$double.eps, 100))#
scaleHat <- mean(dataEnv$aedes.counts.exclude.zeros)/gamma(1+1/shapeHat)#
#
weibullFit = bbmle::mle2(weibullLL,start = list(shape=shapeHat,scale=scaleHat),method = "L-BFGS-B",lower = c(0.1,0.1))#
weibullProf = bbmle::profile(weibullFit)#
#
weibullAIC = bbmle::AIC(weibullFit)#
#
# log-normal seems best#
c(lnormAIC=lnormAIC,expAIC=expAIC,gammaAIC=gammaAIC,weibullAIC=weibullAIC)#
plot(lnormFitProf)#
x =  seq(0,600,by=0.1)#
q_95 = qlnorm(p = 0.95,meanlog = lnormFit[[1]][["meanlog"]],sdlog = lnormFit[[1]][["sdlog"]])#
plot(dlnorm(x = x,meanlog = lnormFit[[1]][["meanlog"]],sdlog = lnormFit[[1]][["sdlog"]]),#
     main = "Fitted Lognormal Density",type="l",xlab="Distance (meters)",ylab="Density",xaxt="n")#
abline(v = q_95*10,col = "blue")#
text(x = (q_95*10), y = 0.005,labels = "95% quantile",col="blue")#
axis(side = 1,at = seq_along(x)[which(x %% 50 == 0)],labels = x[which(x %% 50 == 0)])#
################################################################################
# generate movement kernel from sample data#
################################################################################
#
if(system("whoami",intern=TRUE)=="slwu89"){#
  Rcpp::sourceCpp('~/Desktop/git/MGDrive/Geospatial/calcDistHaversine.cpp')#
  Rcpp::sourceCpp('~/Desktop/git/MGDrivE/Geospatial/calcKernels.cpp')#
}else if(system("whoami",intern=TRUE)=="Partow"){#
  Rcpp::sourceCpp('/Users/Partow/Documents/github/MGDrive/Geospatial/calcDistHaversine.cpp')#
  Rcpp::sourceCpp('/Users/Partow/Documents/github/MGDrivE/Geospatial/calcKernels.cpp')#
}else if(system("whoami",intern=TRUE)=="sanchez.hmsc"){#
  Rcpp::sourceCpp('/Users/sanchez.hmsc/Documents/github/MGDrive/Geospatial/calcDistHaversine.cpp')#
  Rcpp::sourceCpp('/Users/sanchez.hmsc/Documents/github/MGDrivE/Geospatial/calcKernels.cpp')#
}#
#
data = system(command = paste0("ls ",dir),intern = TRUE)#
data = data[grep(pattern = ".*\\.csv$",x = data)]#
assign(x = "xyPts",value = as.matrix(read.table(file = paste0(dir,data),header = FALSE,sep = ",",colClasses = rep("numeric",2))),envir = dataEnv)#
#
distMat = calcDists(longlats = dataEnv$xyPts)#
kernMat = calcLognormalKernel(distMat = distMat,meanlog = lnormFitOptim@coef[[1]],sdlog = lnormFitOptim@coef[[2]])#
calcLognormalKernel#
lnorm.distr = function(longlats){#
  distMat = calcDists(longlats = dataEnv$xyPts)#
  kernMat = calcLognormalKernel(distMat = distMat,meanlog = lnormFitOptim@coef[[1]],sdlog = lnormFitOptim@coef[[2]])#
  return(kernMat)#
}#
gamma.distr = function(longlats){#
  distMat = calcDists(longlats = dataEnv$xyPts)#
  kernMat = calcGammaKernel(distMat = distMat,shape = gammaFit@coef[[1]],rate = gammaFit@coef[[2]])#
  return(kernMat)#
}#
exp.distr = function(longlats){#
  distMat = calcDists(longlats = dataEnv$xyPts)#
  kernMat = calcExpKernel(distMat = distMat,r = expFitOptim@coef[[1]])#
  return(kernMat)#
}#
lnorm.prob = lnorm.distr(longlats = dataEnv$xyPts)#
gamma.prob = gamma.distr(longlats = dataEnv$xyPts)#
exp.prob = exp.distr(longlats = dataEnv$xyPts)#
#### plot the output #####
# plot(as.matrix(dataEnv$xyPts),pch=16,cex=0.25,xlab="longitude (east-west)",ylab ="latitude (north-south)")#
# col_quantile = quantile(kernMat,probs=seq(0,1,0.1))#
# cols = viridis(n = length(col_quantile))#
# n = nrow(kernMat)#
# # n = 100#
# for(i in 1:n){#
#   for(j in 1:n){#
#     segments(x0 = dataEnv$xyPts[i,1],y0 = dataEnv$xyPts[i,2],#
#              x1 = dataEnv$xyPts[j,1],y1 = dataEnv$xyPts[j,2],#
#              col = col_quantile[findInterval(x = kernMat[i,j],vec = col_quantile)])#
#   }#
# }
lnorm.prob = lnorm.distr(longlats = dataEnv$xyPts)
lnorm.prob
row.sum(lnorm.prob)
rowsum(lnorm.prob)
rowSums(lnorm.prob)
##########################################################################
# ╔╦╗┌─┐╔╗╔┌─┐╔╦╗#
# ║║║│ │║║║├┤  ║#
# ╩ ╩└─┘╝╚╝└─┘ ╩#
# Mosquito Networks Taskforce#
# Centrality parser for shapefiles in R#
#################################################################################
library(maptools)#
library(shapefiles)#
library(ggplot2)#
library(viridis)#
library(MGDrivE)#
library(MGDrivEv2)#
library(igraph)#
library(rgdal)#
#################################################################################
# Select the name tag of the location (same as the one used in the OSMnx parser)#
# Setup your MoNeT base directory#
placeNameTag="Moroni"#
setwd("~/Documents/GitHub/MoNeT/")#
outputFolder="./Centrality/ShapefilesCentrality/"#
#################################################################################
# Read shapefile#
shapeFile=read.shp(paste0("./OSMnx/RoadsAndBuildingsParser/SHP/Buildings/",placeNameTag,"/",placeNameTag,".shp"))#
#################################################################################
# Plot shapefile's polygons#
#shape=readOGR("./GeoLandscapes/SHP/Buildings/Moroni/")#
#ggplot(data = shape, aes(x = long, y = lat, group = group)) + geom_path()#
#################################################################################
# Calculate the centroids of the buildings polygons and store as matrix#
latLongsVoid=vector("list",length(shapeFile$shp))#
latLongs=for(i in 1:length(shapeFile$shp)){#
  temp=shapeFile$shp[[i]]$points#
  latLongsVoid[[i]]=c(mean(temp$X),mean(temp$Y))#
}#
matrixLatLongs=unname(Reduce(rbind,latLongsVoid))#
colnames(matrixLatLongs)=c("Latitude","Longitude")
read.table(paste0(outputFolder,"/cache/",placeNameTag,"_centralityVector.csv"))
read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"))
read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"))
centrality=read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"),header=FALSE)
data=cbind(matrixLatLongs,centrality=centrality)#
names(data)[1:2]=c("Longitude","Latitude")#
data_long=reshape2::melt(data=data,measure.vars=c("centrality"))
latLongsVoid=vector("list",length(shapeFile$shp))#
latLongs=for(i in 1:length(shapeFile$shp)){#
  temp=shapeFile$shp[[i]]$points#
  latLongsVoid[[i]]=c(mean(temp$X),mean(temp$Y))#
}#
matrixLatLongs=unname(Reduce(rbind,latLongsVoid))#
colnames(matrixLatLongs)=c("Latitude","Longitude")
#################################################################################
# ╔╦╗┌─┐╔╗╔┌─┐╔╦╗#
# ║║║│ │║║║├┤  ║#
# ╩ ╩└─┘╝╚╝└─┘ ╩#
# Mosquito Networks Taskforce#
# Centrality parser for shapefiles in R#
#################################################################################
library(maptools)#
library(shapefiles)#
library(ggplot2)#
library(viridis)#
library(MGDrivE)#
library(MGDrivEv2)#
library(igraph)#
library(rgdal)#
#################################################################################
# Select the name tag of the location (same as the one used in the OSMnx parser)#
# Setup your MoNeT base directory#
placeNameTag="Comoros"#
setwd("~/Documents/GitHub/MoNeT/")#
outputFolder="./Centrality/ShapefilesCentrality/"#
#################################################################################
# Read shapefile#
shapeFile=read.shp(paste0("./OSMnx/RoadsAndBuildingsParser/SHP/Buildings/",placeNameTag,"/",placeNameTag,".shp"))#
#################################################################################
# Plot shapefile's polygons#
#shape=readOGR("./GeoLandscapes/SHP/Buildings/Moroni/")#
#ggplot(data = shape, aes(x = long, y = lat, group = group)) + geom_path()#
#################################################################################
# Calculate the centroids of the buildings polygons and store as matrix#
latLongsVoid=vector("list",length(shapeFile$shp))#
latLongs=for(i in 1:length(shapeFile$shp)){#
  temp=shapeFile$shp[[i]]$points#
  latLongsVoid[[i]]=c(mean(temp$X),mean(temp$Y))#
}#
matrixLatLongs=unname(Reduce(rbind,latLongsVoid))#
colnames(matrixLatLongs)=c("Latitude","Longitude")#
#################################################################################
# Calculate the distances matrix and the movement kernel#
distancesMatrix=calc_haversine(matrixLatLongs)#
movementKernel=calc_HurdleExpKernel(distancesMatrix,MGDrivE::kernels$exp_rate,.5)#
#################################################################################
# Generate the network to analyse#
graph=graph_from_adjacency_matrix(distancesMatrix,weighted=TRUE)#
graphWeights=E(graph)$weight#
#################################################################################
# Calculate centrality#
centrality=estimate_betweenness(graph,weights=graphWeights,cutoff=1500)#
write.table(centrality,paste0(outputFolder,"/cache/",placeNameTag,"_centralityVector.csv"))#
#centrality=read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"),header=FALSE)#
#################################################################################
# Reshape centrality matrix#
data=cbind(matrixLatLongs,centrality=centrality)#
names(data)[1:2]=c("Longitude","Latitude")#
data_long=reshape2::melt(data=data,measure.vars=c("centrality"))#
#################################################################################
# Generate and export scatter plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude)) +#
  geom_point(aes(color=centrality),size=8,shape=16,alpha=.65) +#
  scale_color_viridis(#
    name="Centrality",#
    guide=guide_legend(keyheight=unit(3,units="mm"),keywidth=unit(12,units="mm"),label.position="bottom",title.position='top',nrow=10)#
  ) + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityScatter.pdf"),width=30,height=30)#
#################################################################################
# Generate and export hex plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/30) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
#################################################################################
# ╔╦╗┌─┐╔╗╔┌─┐╔╦╗#
# ║║║│ │║║║├┤  ║#
# ╩ ╩└─┘╝╚╝└─┘ ╩#
# Mosquito Networks Taskforce#
# Centrality parser for shapefiles in R#
#################################################################################
library(maptools)#
library(shapefiles)#
library(ggplot2)#
library(viridis)#
library(MGDrivE)#
library(MGDrivEv2)#
library(igraph)#
library(rgdal)#
#################################################################################
# Select the name tag of the location (same as the one used in the OSMnx parser)#
# Setup your MoNeT base directory#
placeNameTag="Gordonvale"#
setwd("~/Documents/GitHub/MoNeT/")#
outputFolder="./Centrality/ShapefilesCentrality/"#
#################################################################################
# Read shapefile#
shapeFile=read.shp(paste0("./OSMnx/RoadsAndBuildingsParser/SHP/Buildings/",placeNameTag,"/",placeNameTag,".shp"))#
#################################################################################
# Plot shapefile's polygons#
#shape=readOGR("./GeoLandscapes/SHP/Buildings/Moroni/")#
#ggplot(data = shape, aes(x = long, y = lat, group = group)) + geom_path()#
#################################################################################
# Calculate the centroids of the buildings polygons and store as matrix#
latLongsVoid=vector("list",length(shapeFile$shp))#
latLongs=for(i in 1:length(shapeFile$shp)){#
  temp=shapeFile$shp[[i]]$points#
  latLongsVoid[[i]]=c(mean(temp$X),mean(temp$Y))#
}#
matrixLatLongs=unname(Reduce(rbind,latLongsVoid))#
colnames(matrixLatLongs)=c("Latitude","Longitude")#
#################################################################################
# Calculate the distances matrix and the movement kernel#
distancesMatrix=calc_haversine(matrixLatLongs)#
movementKernel=calc_HurdleExpKernel(distancesMatrix,MGDrivE::kernels$exp_rate,.5)#
#################################################################################
# Generate the network to analyse#
graph=graph_from_adjacency_matrix(distancesMatrix,weighted=TRUE)#
graphWeights=E(graph)$weight#
#################################################################################
# Calculate centrality#
centrality=estimate_betweenness(graph,weights=graphWeights,cutoff=1500)#
write.table(centrality,paste0(outputFolder,"/cache/",placeNameTag,"_centralityVector.csv"))#
#centrality=read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"),header=FALSE)#
#################################################################################
# Reshape centrality matrix#
data=cbind(matrixLatLongs,centrality=centrality)#
names(data)[1:2]=c("Longitude","Latitude")#
data_long=reshape2::melt(data=data,measure.vars=c("centrality"))#
#################################################################################
# Generate and export scatter plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude)) +#
  geom_point(aes(color=centrality),size=8,shape=16,alpha=.65) +#
  scale_color_viridis(#
    name="Centrality",#
    guide=guide_legend(keyheight=unit(3,units="mm"),keywidth=unit(12,units="mm"),label.position="bottom",title.position='top',nrow=10)#
  ) + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityScatter.pdf"),width=30,height=30)#
#################################################################################
# Generate and export hex plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/30) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/25) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
#################################################################################
# ╔╦╗┌─┐╔╗╔┌─┐╔╦╗#
# ║║║│ │║║║├┤  ║#
# ╩ ╩└─┘╝╚╝└─┘ ╩#
# Mosquito Networks Taskforce#
# Centrality parser for shapefiles in R#
#################################################################################
library(maptools)#
library(shapefiles)#
library(ggplot2)#
library(viridis)#
library(MGDrivE)#
library(MGDrivEv2)#
library(igraph)#
library(rgdal)#
#################################################################################
# Select the name tag of the location (same as the one used in the OSMnx parser)#
# Setup your MoNeT base directory#
placeNameTag="YorkeysKnob"#
setwd("~/Documents/GitHub/MoNeT/")#
outputFolder="./Centrality/ShapefilesCentrality/"#
#################################################################################
# Read shapefile#
shapeFile=read.shp(paste0("./OSMnx/RoadsAndBuildingsParser/SHP/Buildings/",placeNameTag,"/",placeNameTag,".shp"))#
#################################################################################
# Plot shapefile's polygons#
#shape=readOGR("./GeoLandscapes/SHP/Buildings/Moroni/")#
#ggplot(data = shape, aes(x = long, y = lat, group = group)) + geom_path()#
#################################################################################
# Calculate the centroids of the buildings polygons and store as matrix#
latLongsVoid=vector("list",length(shapeFile$shp))#
latLongs=for(i in 1:length(shapeFile$shp)){#
  temp=shapeFile$shp[[i]]$points#
  latLongsVoid[[i]]=c(mean(temp$X),mean(temp$Y))#
}#
matrixLatLongs=unname(Reduce(rbind,latLongsVoid))#
colnames(matrixLatLongs)=c("Latitude","Longitude")#
#################################################################################
# Calculate the distances matrix and the movement kernel#
distancesMatrix=calc_haversine(matrixLatLongs)#
movementKernel=calc_HurdleExpKernel(distancesMatrix,MGDrivE::kernels$exp_rate,.5)#
#################################################################################
# Generate the network to analyse#
graph=graph_from_adjacency_matrix(distancesMatrix,weighted=TRUE)#
graphWeights=E(graph)$weight#
#################################################################################
# Calculate centrality#
centrality=estimate_betweenness(graph,weights=graphWeights,cutoff=1500)#
write.table(centrality,paste0(outputFolder,"/cache/",placeNameTag,"_centralityVector.csv"))#
#centrality=read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"),header=FALSE)#
#################################################################################
# Reshape centrality matrix#
data=cbind(matrixLatLongs,centrality=centrality)#
names(data)[1:2]=c("Longitude","Latitude")#
data_long=reshape2::melt(data=data,measure.vars=c("centrality"))#
#################################################################################
# Generate and export scatter plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude)) +#
  geom_point(aes(color=centrality),size=8,shape=16,alpha=.65) +#
  scale_color_viridis(#
    name="Centrality",#
    guide=guide_legend(keyheight=unit(3,units="mm"),keywidth=unit(12,units="mm"),label.position="bottom",title.position='top',nrow=10)#
  ) + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityScatter.pdf"),width=30,height=30)#
#################################################################################
# Generate and export hex plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/25) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
#################################################################################
# ╔╦╗┌─┐╔╗╔┌─┐╔╦╗#
# ║║║│ │║║║├┤  ║#
# ╩ ╩└─┘╝╚╝└─┘ ╩#
# Mosquito Networks Taskforce#
# Centrality parser for shapefiles in R#
#################################################################################
library(maptools)#
library(shapefiles)#
library(ggplot2)#
library(viridis)#
library(MGDrivE)#
library(MGDrivEv2)#
library(igraph)#
library(rgdal)#
#################################################################################
# Select the name tag of the location (same as the one used in the OSMnx parser)#
# Setup your MoNeT base directory#
placeNameTag="ArroyoGrande"#
setwd("~/Documents/GitHub/MoNeT/")#
outputFolder="./Centrality/ShapefilesCentrality/"#
#################################################################################
# Read shapefile#
shapeFile=read.shp(paste0("./OSMnx/RoadsAndBuildingsParser/SHP/Buildings/",placeNameTag,"/",placeNameTag,".shp"))#
#################################################################################
# Plot shapefile's polygons#
#shape=readOGR("./GeoLandscapes/SHP/Buildings/Moroni/")#
#ggplot(data = shape, aes(x = long, y = lat, group = group)) + geom_path()#
#################################################################################
# Calculate the centroids of the buildings polygons and store as matrix#
latLongsVoid=vector("list",length(shapeFile$shp))#
latLongs=for(i in 1:length(shapeFile$shp)){#
  temp=shapeFile$shp[[i]]$points#
  latLongsVoid[[i]]=c(mean(temp$X),mean(temp$Y))#
}#
matrixLatLongs=unname(Reduce(rbind,latLongsVoid))#
colnames(matrixLatLongs)=c("Latitude","Longitude")#
#################################################################################
# Calculate the distances matrix and the movement kernel#
distancesMatrix=calc_haversine(matrixLatLongs)#
movementKernel=calc_HurdleExpKernel(distancesMatrix,MGDrivE::kernels$exp_rate,.5)#
#################################################################################
# Generate the network to analyse#
graph=graph_from_adjacency_matrix(distancesMatrix,weighted=TRUE)#
graphWeights=E(graph)$weight#
#################################################################################
# Calculate centrality#
centrality=estimate_betweenness(graph,weights=graphWeights,cutoff=1500)#
write.table(centrality,paste0(outputFolder,"/cache/",placeNameTag,"_centralityVector.csv"))#
#centrality=read.table(paste0(outputFolder,"cache/",placeNameTag,"_centralityVector.csv"),header=FALSE)#
#################################################################################
# Reshape centrality matrix#
data=cbind(matrixLatLongs,centrality=centrality)#
names(data)[1:2]=c("Longitude","Latitude")#
data_long=reshape2::melt(data=data,measure.vars=c("centrality"))#
#################################################################################
# Generate and export scatter plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude)) +#
  geom_point(aes(color=centrality),size=8,shape=16,alpha=.65) +#
  scale_color_viridis(#
    name="Centrality",#
    guide=guide_legend(keyheight=unit(3,units="mm"),keywidth=unit(12,units="mm"),label.position="bottom",title.position='top',nrow=10)#
  ) + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityScatter.pdf"),width=30,height=30)#
#################################################################################
# Generate and export hex plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/25) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/30) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/40) +#
    scale_fill_viridis(option="B") + theme_light()
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/50) +#
    scale_fill_viridis(option="B") + theme_light()
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=nrow(matrixLatLongs)/50) +#
    scale_fill_viridis(option="B") + theme_light()
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=round(nrow(matrixLatLongs)/45)) +#
    scale_fill_viridis(option="B") + theme_light()
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=round(nrow(matrixLatLongs)/75)) +#
    scale_fill_viridis(option="B") + theme_light()
# Generate and export hex plot#
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=round(nrow(matrixLatLongs)/60)) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
ggplot(data=as.data.frame(data),aes(x=Latitude,y=Longitude))  +#
    stat_summary_hex(aes(z=centrality),size=25,alpha=.95,bins=round(nrow(matrixLatLongs)/50)) +#
    scale_fill_viridis(option="B") + theme_light()#
ggsave(paste0(outputFolder,"/images/",placeNameTag,"_centralityHex.pdf"),width=30,height=30)
