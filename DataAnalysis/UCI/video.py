#!/usr/bin/python
# -*- coding: utf-8 -*-

###############################################################################
# Clustered video routines
###############################################################################
# In case of:
#   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1
#   https://github.com/matplotlib/basemap/issues/324
# Depends on an obsolete structure (needs to be updated):
#   https://github.com/Chipdelmal/MoNeT/blob/master/DataAnalysis/ERACR/Yorkeys.py
#   https://github.com/Chipdelmal/MoNeT/tree/master/DataAnalysis/AggregationAndClustering
###############################################################################
import glob
import subprocess
import auxVideo as aux
import auxCluster as auxC
import MoNeT_MGDrivE as monet

BASE_PATH = '/Volumes/marshallShare/UCI/STP/'
(dataFldr, expName, clstFldr, aggLvl, clstSample) = (
        'out', 'stp_kernel_elevation_v3_balanced_NRM',
        'kernels/clustered', 'C0050', '001'
    )
###############################################################################
# Colors and genotypes
###############################################################################
colors = [
        "#090446", "#f20060", "#ff28d4", "#7fff3a", "#c6d8ff", '#6e44ff',
        '#e56399', '#ee6c4d', '#861657', '#5cf64a', 'yellow', 'magenta',
        'purple', 'black', 'cyan', 'teal'
    ]
aggDict = {
        'genotypes': ['W', 'H', 'R/B', 'E'],
        'indices': [
                [0, 0, 1, 2, 3, 4],
                [1, 5, 5, 6, 7, 8],
                [3, 7, 10, 12, 12, 13, 4, 8, 11, 13, 14, 14],
                [2, 6, 9, 9, 10, 11]
            ]
    }

###############################################################################
# File paths
###############################################################################
#   BASE_PATH: Root directory for the experiment
#   expFolder: Folder that contains the [ANALYZED, GARBAGE, RAW] sets
#   extras: Folder that contains the [MAP, VBG, CLS, CLL, AGG, AGCV] files
#       generated by the aggregation routines
#   expPath: Folder nested within the ANALYZED folder for parameters sweeps
#       (would be equal to expFolder in case it's not existing)
###############################################################################
(expFolder, extras, expPath, outPath) = (
        BASE_PATH + dataFldr,
        BASE_PATH + clstFldr + '/',
        BASE_PATH + dataFldr + '/' + expName + '/ANALYZED/0001/',
        BASE_PATH + 'video/'
    )
###############################################################################
# File names parsing
###############################################################################
#   VBG: Clustered PNG
#   CLL: Number of nodes in cluster?
#   CLS: {x, y, clusterID} -> contained now in "_I"
#   AGG: Aggregated migration matrix "_A"
#   AGCV: Clusters centroids? -> contained now in "_I"
###############################################################################
(patchFilePattern, imagePattern) = (
        {'males': '/M_*', 'females': '/F_*'},
        '/c_%06d.png'
    )
(bgName, originalCoordFile) = (
        glob.glob(extras + aggLvl + '_' + clstSample + '*VBG.png')[0],
        glob.glob(extras + aggLvl + '_' + clstSample + '*I.csv')[0]
    )
(vname, imageLocation) = (
        outPath + 'movie.mp4',
        outPath + 'clustercharts/'
    )
original_corners = aux.get_corners(originalCoordFile)
coordinates = auxC.getClustersNewScheme(originalCoordFile)
subprocess.Popen(['mkdir', imageLocation])
###############################################################################
# Create video
###############################################################################
clusters = monet.populateClusters(
        len(coordinates[0]), '', expPath, patchFilePattern
    )
expPath
aggList = monet.aggregateClusters(clusters, aggDict)
monet.generateClusterGraphs(
        aggList, coordinates, imageLocation, colors, original_corners,
        0.002, 512, skip=True
    )
video = monet.generateVideo(vname, bgName, imageLocation, imagePattern)
video.wait()

expPath
