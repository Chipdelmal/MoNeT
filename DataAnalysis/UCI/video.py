#!/usr/bin/python
# -*- coding: utf-8 -*-

###############################################################################
# Clustered video routines
###############################################################################
# In case of:
#   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf1
#   https://github.com/matplotlib/basemap/issues/324
# Depends on an obsolete structure (needs to be updated):
#   https://github.com/Chipdelmal/MoNeT/blob/master/DataAnalysis/ERACR/Yorkeys.py
#   https://github.com/Chipdelmal/MoNeT/tree/master/DataAnalysis/AggregationAndClustering
###############################################################################
import glob
import warnings
import subprocess
import numpy as np
import auxVideo as aux
import auxCluster as auxC
import MoNeT_MGDrivE as monet
warnings.filterwarnings("ignore", category=UserWarning)

BASE_PATH = '/Volumes/marshallShare/UCI/STP/'
(dataFldr, expName, clstFldr, aggLvl, clstSample) = (
        'out', 'stp_kernel_elevation_v3_balanced_NRM',
        'kernels/clustered', 'C0002', '001'
    )
(PAD, DPI) = (.1, 512)
###############################################################################
# Colors and genotypes
###############################################################################
colors = [
        "#090446", "#f20060", "#ff28d4", "#7fff3a", "#c6d8ff", '#6e44ff',
        '#e56399', '#ee6c4d', '#861657', '#5cf64a', 'yellow', 'magenta',
        'purple', 'black', 'cyan', 'teal'
    ]
aggDict = monet.autoGenerateGenotypesDictionary(
        ['W', 'H', 'R', 'B'],
        ['WW', 'WH', 'WR', 'WB', 'HH', 'HR', 'HB', 'RR', 'RB', 'BB']
    )
###############################################################################
# File paths
###############################################################################
#   BASE_PATH: Root directory for the experiment
#   expFolder: Folder that contains the [ANALYZED, GARBAGE, RAW] sets
#   extras: Folder that contains the [MAP, VBG, CLS, CLL, AGG, AGCV] files
#       generated by the aggregation routines
#   expPath: Folder nested within the ANALYZED folder for parameters sweeps
#       (would be equal to expFolder in case it's not existing)
###############################################################################
(expFolder, extras, expPath, outPath) = (
        BASE_PATH + dataFldr,
        BASE_PATH + clstFldr + '/',
        BASE_PATH + dataFldr + '/' + expName + '/ANALYZED/0001/',
        BASE_PATH + 'video/'
    )
###############################################################################
# File names parsing
###############################################################################
#   VBG: Clustered PNG
#   CLL: Number of nodes in cluster?
#   CLS: {x, y, clusterID} -> contained now in "_I"
#   AGG: Aggregated migration matrix "_A"
#   AGCV: Clusters centroids? -> contained now in "_I"
###############################################################################
(patchFilePattern, imagePattern) = (
        {'male': '/M_*', 'female': ''},
        'c_%06d.png'
    )
(bgName, originalCoordFile) = (
        glob.glob(extras + aggLvl + '_' + clstSample + '*VBG.png')[0],
        glob.glob(extras + aggLvl + '_' + clstSample + '*I.csv')[0]
    )
(vname, imageLocation) = (
        outPath + 'STP.mp4',
        outPath + 'clustercharts/'
    )
original_corners = aux.get_corners(originalCoordFile)
(coordinates, clstList) = (
        auxC.getClustersNewScheme(originalCoordFile),
        auxC.readClustersIDs(originalCoordFile)
    )
subprocess.Popen(['mkdir', imageLocation])
###############################################################################
# Create video
###############################################################################
clusters = auxC.populateClustersFromList(
        clstList, expPath, patchFilePattern
    )
clusters[0]['male']

aggList = monet.aggregateClusters(clusters, aggDict)
meanPopSize = np.mean([i[100][0] for i in aggList])
aux.generateClusterGraphs(
        originalCoordFile,
        aggList, coordinates, imageLocation, colors, original_corners,
        PAD, DPI, skip=False, countries=True, refPopSize= 750 #np.amax(aggList) * .1
    )

# video = aux.callffmpeg(imageLocation, 'c_%06d.png ', 30, (4096, 2160), vname)
# video.wait()
# ffmpeg -r 30 -f image2 -s 4096x2160 -i /Volumes/marshallShare/UCI/STP/video/clustercharts/c_%06d.png  -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -vcodec libx264 -crf 25 -pix_fmt yuv420p /Volumes/marshallShare/UCI/STP/video/STP.mp4
